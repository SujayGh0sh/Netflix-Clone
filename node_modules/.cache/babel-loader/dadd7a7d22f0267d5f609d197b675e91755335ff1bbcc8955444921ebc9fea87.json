{"ast":null,"code":"import '@firebase/installations';\nimport { Component } from '@firebase/component';\nimport { openDB, deleteDB } from 'idb';\nimport { ErrorFactory, isIndexedDBAvailable, validateIndexedDBOpenable, getModularInstance } from '@firebase/util';\nimport { _registerComponent, _getProvider, getApp } from '@firebase/app';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst DEFAULT_VAPID_KEY = 'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\nconst ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n/** Key of FCM Payload in Notification's data field. */\nconst FCM_MSG = 'FCM_MSG';\nconst CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\n// Defined as in proto/messaging_event.proto. Neglecting fields that are supported.\nconst SDK_PLATFORM_WEB = 3;\nconst EVENT_MESSAGE_DELIVERED = 1;\nvar MessageType$1;\n(function (MessageType) {\n  MessageType[MessageType[\"DATA_MESSAGE\"] = 1] = \"DATA_MESSAGE\";\n  MessageType[MessageType[\"DISPLAY_NOTIFICATION\"] = 3] = \"DISPLAY_NOTIFICATION\";\n})(MessageType$1 || (MessageType$1 = {}));\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\r\n * in compliance with the License. You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n * or implied. See the License for the specific language governing permissions and limitations under\r\n * the License.\r\n */\nvar MessageType;\n(function (MessageType) {\n  MessageType[\"PUSH_RECEIVED\"] = \"push-received\";\n  MessageType[\"NOTIFICATION_CLICKED\"] = \"notification-clicked\";\n})(MessageType || (MessageType = {}));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction arrayToBase64(array) {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\nfunction base64ToArray(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\r\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\r\n * callback is called for all versions of the old DB.\r\n */\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\nasync function migrateOldDatabase(senderId) {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\n    // typecast when it lands in TS types.\n    const databases = await indexedDB.databases();\n    const dbNames = databases.map(db => db.name);\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n  let tokenDetails = null;\n  const db = await openDB(OLD_DB_NAME, OLD_DB_VERSION, {\n    upgrade: async (db, oldVersion, newVersion, upgradeTransaction) => {\n      var _a;\n      if (oldVersion < 2) {\n        // Database too old, skip migration.\n        return;\n      }\n      if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n        // Database did not exist. Nothing to do.\n        return;\n      }\n      const objectStore = upgradeTransaction.objectStore(OLD_OBJECT_STORE_NAME);\n      const value = await objectStore.index('fcmSenderId').get(senderId);\n      await objectStore.clear();\n      if (!value) {\n        // No entry in the database, nothing to migrate.\n        return;\n      }\n      if (oldVersion === 2) {\n        const oldDetails = value;\n        if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n          return;\n        }\n        tokenDetails = {\n          token: oldDetails.fcmToken,\n          createTime: (_a = oldDetails.createTime) !== null && _a !== void 0 ? _a : Date.now(),\n          subscriptionOptions: {\n            auth: oldDetails.auth,\n            p256dh: oldDetails.p256dh,\n            endpoint: oldDetails.endpoint,\n            swScope: oldDetails.swScope,\n            vapidKey: typeof oldDetails.vapidKey === 'string' ? oldDetails.vapidKey : arrayToBase64(oldDetails.vapidKey)\n          }\n        };\n      } else if (oldVersion === 3) {\n        const oldDetails = value;\n        tokenDetails = {\n          token: oldDetails.fcmToken,\n          createTime: oldDetails.createTime,\n          subscriptionOptions: {\n            auth: arrayToBase64(oldDetails.auth),\n            p256dh: arrayToBase64(oldDetails.p256dh),\n            endpoint: oldDetails.endpoint,\n            swScope: oldDetails.swScope,\n            vapidKey: arrayToBase64(oldDetails.vapidKey)\n          }\n        };\n      } else if (oldVersion === 4) {\n        const oldDetails = value;\n        tokenDetails = {\n          token: oldDetails.fcmToken,\n          createTime: oldDetails.createTime,\n          subscriptionOptions: {\n            auth: arrayToBase64(oldDetails.auth),\n            p256dh: arrayToBase64(oldDetails.p256dh),\n            endpoint: oldDetails.endpoint,\n            swScope: oldDetails.swScope,\n            vapidKey: arrayToBase64(oldDetails.vapidKey)\n          }\n        };\n      }\n    }\n  });\n  db.close();\n  // Delete all old databases.\n  await deleteDB(OLD_DB_NAME);\n  await deleteDB('fcm_vapid_details_db');\n  await deleteDB('undefined');\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\nfunction checkTokenDetails(tokenDetails) {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n  const {\n    subscriptionOptions\n  } = tokenDetails;\n  return typeof tokenDetails.createTime === 'number' && tokenDetails.createTime > 0 && typeof tokenDetails.token === 'string' && tokenDetails.token.length > 0 && typeof subscriptionOptions.auth === 'string' && subscriptionOptions.auth.length > 0 && typeof subscriptionOptions.p256dh === 'string' && subscriptionOptions.p256dh.length > 0 && typeof subscriptionOptions.endpoint === 'string' && subscriptionOptions.endpoint.length > 0 && typeof subscriptionOptions.swScope === 'string' && subscriptionOptions.swScope.length > 0 && typeof subscriptionOptions.vapidKey === 'string' && subscriptionOptions.vapidKey.length > 0;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Exported for tests.\nconst DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\nlet dbPromise = null;\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (upgradeDb, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n        // because if there are multiple versions between the old version and the current version, we\n        // want ALL the migrations that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n  return dbPromise;\n}\n/** Gets record(s) from the objectStore that match the given key. */\nasync function dbGet(firebaseDependencies) {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = await db.transaction(OBJECT_STORE_NAME).objectStore(OBJECT_STORE_NAME).get(key);\n  if (tokenDetails) {\n    return tokenDetails;\n  } else {\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(firebaseDependencies.appConfig.senderId);\n    if (oldTokenDetails) {\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n    }\n  }\n}\n/** Assigns or overwrites the record for the given key with the given value. */\nasync function dbSet(firebaseDependencies, tokenDetails) {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.done;\n  return tokenDetails;\n}\n/** Removes record(s) from the objectStore that match the given key. */\nasync function dbRemove(firebaseDependencies) {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\nfunction getKey(_ref) {\n  let {\n    appConfig\n  } = _ref;\n  return appConfig.appId;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst ERROR_MAP = {\n  [\"missing-app-config-values\" /* ErrorCode.MISSING_APP_CONFIG_VALUES */]: 'Missing App configuration value: \"{$valueName}\"',\n  [\"only-available-in-window\" /* ErrorCode.AVAILABLE_IN_WINDOW */]: 'This method is available in a Window context.',\n  [\"only-available-in-sw\" /* ErrorCode.AVAILABLE_IN_SW */]: 'This method is available in a service worker context.',\n  [\"permission-default\" /* ErrorCode.PERMISSION_DEFAULT */]: 'The notification permission was not granted and dismissed instead.',\n  [\"permission-blocked\" /* ErrorCode.PERMISSION_BLOCKED */]: 'The notification permission was not granted and blocked instead.',\n  [\"unsupported-browser\" /* ErrorCode.UNSUPPORTED_BROWSER */]: \"This browser doesn't support the API's required to use the Firebase SDK.\",\n  [\"indexed-db-unsupported\" /* ErrorCode.INDEXED_DB_UNSUPPORTED */]: \"This browser doesn't support indexedDb.open() (ex. Safari iFrame, Firefox Private Browsing, etc)\",\n  [\"failed-service-worker-registration\" /* ErrorCode.FAILED_DEFAULT_REGISTRATION */]: 'We are unable to register the default service worker. {$browserErrorMessage}',\n  [\"token-subscribe-failed\" /* ErrorCode.TOKEN_SUBSCRIBE_FAILED */]: 'A problem occurred while subscribing the user to FCM: {$errorInfo}',\n  [\"token-subscribe-no-token\" /* ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN */]: 'FCM returned no token when subscribing the user to push.',\n  [\"token-unsubscribe-failed\" /* ErrorCode.TOKEN_UNSUBSCRIBE_FAILED */]: 'A problem occurred while unsubscribing the ' + 'user from FCM: {$errorInfo}',\n  [\"token-update-failed\" /* ErrorCode.TOKEN_UPDATE_FAILED */]: 'A problem occurred while updating the user from FCM: {$errorInfo}',\n  [\"token-update-no-token\" /* ErrorCode.TOKEN_UPDATE_NO_TOKEN */]: 'FCM returned no token when updating the user to push.',\n  [\"use-sw-after-get-token\" /* ErrorCode.USE_SW_AFTER_GET_TOKEN */]: 'The useServiceWorker() method may only be called once and must be ' + 'called before calling getToken() to ensure your service worker is used.',\n  [\"invalid-sw-registration\" /* ErrorCode.INVALID_SW_REGISTRATION */]: 'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [\"invalid-bg-handler\" /* ErrorCode.INVALID_BG_HANDLER */]: 'The input to setBackgroundMessageHandler() must be a function.',\n  [\"invalid-vapid-key\" /* ErrorCode.INVALID_VAPID_KEY */]: 'The public VAPID key must be a string.',\n  [\"use-vapid-key-after-get-token\" /* ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN */]: 'The usePublicVapidKey() method may only be called once and must be ' + 'called before calling getToken() to ensure your VAPID key is used.'\n};\nconst ERROR_FACTORY = new ErrorFactory('messaging', 'Messaging', ERROR_MAP);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nasync function requestGetToken(firebaseDependencies, subscriptionOptions) {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n  let responseData;\n  try {\n    const response = await fetch(getEndpoint(firebaseDependencies.appConfig), subscribeOptions);\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(\"token-subscribe-failed\" /* ErrorCode.TOKEN_SUBSCRIBE_FAILED */, {\n      errorInfo: err === null || err === void 0 ? void 0 : err.toString()\n    });\n  }\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(\"token-subscribe-failed\" /* ErrorCode.TOKEN_SUBSCRIBE_FAILED */, {\n      errorInfo: message\n    });\n  }\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(\"token-subscribe-no-token\" /* ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN */);\n  }\n\n  return responseData.token;\n}\nasync function requestUpdateToken(firebaseDependencies, tokenDetails) {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions);\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n  let responseData;\n  try {\n    const response = await fetch(`${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`, updateOptions);\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(\"token-update-failed\" /* ErrorCode.TOKEN_UPDATE_FAILED */, {\n      errorInfo: err === null || err === void 0 ? void 0 : err.toString()\n    });\n  }\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(\"token-update-failed\" /* ErrorCode.TOKEN_UPDATE_FAILED */, {\n      errorInfo: message\n    });\n  }\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(\"token-update-no-token\" /* ErrorCode.TOKEN_UPDATE_NO_TOKEN */);\n  }\n\n  return responseData.token;\n}\nasync function requestDeleteToken(firebaseDependencies, token) {\n  const headers = await getHeaders(firebaseDependencies);\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n  try {\n    const response = await fetch(`${getEndpoint(firebaseDependencies.appConfig)}/${token}`, unsubscribeOptions);\n    const responseData = await response.json();\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(\"token-unsubscribe-failed\" /* ErrorCode.TOKEN_UNSUBSCRIBE_FAILED */, {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(\"token-unsubscribe-failed\" /* ErrorCode.TOKEN_UNSUBSCRIBE_FAILED */, {\n      errorInfo: err === null || err === void 0 ? void 0 : err.toString()\n    });\n  }\n}\nfunction getEndpoint(_ref2) {\n  let {\n    projectId\n  } = _ref2;\n  return `${ENDPOINT}/projects/${projectId}/registrations`;\n}\nasync function getHeaders(_ref3) {\n  let {\n    appConfig,\n    installations\n  } = _ref3;\n  const authToken = await installations.getToken();\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\nfunction getBody(_ref4) {\n  let {\n    p256dh,\n    auth,\n    endpoint,\n    vapidKey\n  } = _ref4;\n  const body = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n  return body;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// UpdateRegistration will be called once every week.\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\nasync function getTokenInternal(messaging) {\n  const pushSubscription = await getPushSubscription(messaging.swRegistration, messaging.vapidKey);\n  const subscriptionOptions = {\n    vapidKey: messaging.vapidKey,\n    swScope: messaging.swRegistration.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh'))\n  };\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(messaging.firebaseDependencies, subscriptionOptions);\n  } else if (!isTokenValid(tokenDetails.subscriptionOptions, subscriptionOptions)) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(messaging.firebaseDependencies, tokenDetails.token);\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n    return getNewToken(messaging.firebaseDependencies, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(messaging, {\n      token: tokenDetails.token,\n      createTime: Date.now(),\n      subscriptionOptions\n    });\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n/**\r\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\r\n * the push subscription if it exists.\r\n */\nasync function deleteTokenInternal(messaging) {\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  if (tokenDetails) {\n    await requestDeleteToken(messaging.firebaseDependencies, tokenDetails.token);\n    await dbRemove(messaging.firebaseDependencies);\n  }\n  // Unsubscribe from the push subscription.\n  const pushSubscription = await messaging.swRegistration.pushManager.getSubscription();\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  }\n  // If there's no SW, consider it a success.\n  return true;\n}\nasync function updateToken(messaging, tokenDetails) {\n  try {\n    const updatedToken = await requestUpdateToken(messaging.firebaseDependencies, tokenDetails);\n    const updatedTokenDetails = Object.assign(Object.assign({}, tokenDetails), {\n      token: updatedToken,\n      createTime: Date.now()\n    });\n    await dbSet(messaging.firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteTokenInternal(messaging);\n    throw e;\n  }\n}\nasync function getNewToken(firebaseDependencies, subscriptionOptions) {\n  const token = await requestGetToken(firebaseDependencies, subscriptionOptions);\n  const tokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n/**\r\n * Gets a PushSubscription for the current user.\r\n */\nasync function getPushSubscription(swRegistration, vapidKey) {\n  const subscription = await swRegistration.pushManager.getSubscription();\n  if (subscription) {\n    return subscription;\n  }\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n  });\n}\n/**\r\n * Checks if the saved tokenDetails object matches the configuration provided.\r\n */\nfunction isTokenValid(dbOptions, currentOptions) {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction externalizePayload(internalPayload) {\n  const payload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key,\n    // eslint-disable-next-line camelcase\n    messageId: internalPayload.fcmMessageId\n  };\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n  return payload;\n}\nfunction propagateNotificationPayload(payload, messagePayloadInternal) {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n  payload.notification = {};\n  const title = messagePayloadInternal.notification.title;\n  if (!!title) {\n    payload.notification.title = title;\n  }\n  const body = messagePayloadInternal.notification.body;\n  if (!!body) {\n    payload.notification.body = body;\n  }\n  const image = messagePayloadInternal.notification.image;\n  if (!!image) {\n    payload.notification.image = image;\n  }\n  const icon = messagePayloadInternal.notification.icon;\n  if (!!icon) {\n    payload.notification.icon = icon;\n  }\n}\nfunction propagateDataPayload(payload, messagePayloadInternal) {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n  payload.data = messagePayloadInternal.data;\n}\nfunction propagateFcmOptions(payload, messagePayloadInternal) {\n  var _a, _b, _c, _d, _e;\n  // fcmOptions.link value is written into notification.click_action. see more in b/232072111\n  if (!messagePayloadInternal.fcmOptions && !((_a = messagePayloadInternal.notification) === null || _a === void 0 ? void 0 : _a.click_action)) {\n    return;\n  }\n  payload.fcmOptions = {};\n  const link = (_c = (_b = messagePayloadInternal.fcmOptions) === null || _b === void 0 ? void 0 : _b.link) !== null && _c !== void 0 ? _c : (_d = messagePayloadInternal.notification) === null || _d === void 0 ? void 0 : _d.click_action;\n  if (!!link) {\n    payload.fcmOptions.link = link;\n  }\n  // eslint-disable-next-line camelcase\n  const analyticsLabel = (_e = messagePayloadInternal.fcmOptions) === null || _e === void 0 ? void 0 : _e.analytics_label;\n  if (!!analyticsLabel) {\n    payload.fcmOptions.analyticsLabel = analyticsLabel;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isConsoleMessage(data) {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Returns a promise that resolves after given time passes. */\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n_mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');\n_mergeStrings('AzSCbw63g1R0nCw85jG8', 'Iaya3yLKwmgvh7cF0q4');\nasync function stageLog(messaging, internalPayload) {\n  const fcmEvent = createFcmEvent(internalPayload, await messaging.firebaseDependencies.installations.getId());\n  createAndEnqueueLogEvent(messaging, fcmEvent);\n}\nfunction createFcmEvent(internalPayload, fid) {\n  var _a, _b;\n  const fcmEvent = {};\n  /* eslint-disable camelcase */\n  // some fields should always be non-null. Still check to ensure.\n  if (!!internalPayload.from) {\n    fcmEvent.project_number = internalPayload.from;\n  }\n  if (!!internalPayload.fcmMessageId) {\n    fcmEvent.message_id = internalPayload.fcmMessageId;\n  }\n  fcmEvent.instance_id = fid;\n  if (!!internalPayload.notification) {\n    fcmEvent.message_type = MessageType$1.DISPLAY_NOTIFICATION.toString();\n  } else {\n    fcmEvent.message_type = MessageType$1.DATA_MESSAGE.toString();\n  }\n  fcmEvent.sdk_platform = SDK_PLATFORM_WEB.toString();\n  fcmEvent.package_name = self.origin.replace(/(^\\w+:|^)\\/\\//, '');\n  if (!!internalPayload.collapse_key) {\n    fcmEvent.collapse_key = internalPayload.collapse_key;\n  }\n  fcmEvent.event = EVENT_MESSAGE_DELIVERED.toString();\n  if (!!((_a = internalPayload.fcmOptions) === null || _a === void 0 ? void 0 : _a.analytics_label)) {\n    fcmEvent.analytics_label = (_b = internalPayload.fcmOptions) === null || _b === void 0 ? void 0 : _b.analytics_label;\n  }\n  /* eslint-enable camelcase */\n  return fcmEvent;\n}\nfunction createAndEnqueueLogEvent(messaging, fcmEvent) {\n  const logEvent = {};\n  /* eslint-disable camelcase */\n  logEvent.event_time_ms = Math.floor(Date.now()).toString();\n  logEvent.source_extension_json_proto3 = JSON.stringify(fcmEvent);\n  // eslint-disable-next-line camelcase\n  messaging.logEvents.push(logEvent);\n}\nfunction _mergeStrings(s1, s2) {\n  const resultArray = [];\n  for (let i = 0; i < s1.length; i++) {\n    resultArray.push(s1.charAt(i));\n    if (i < s2.length) {\n      resultArray.push(s2.charAt(i));\n    }\n  }\n  return resultArray.join('');\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nasync function onSubChange(event, messaging) {\n  var _a, _b;\n  const {\n    newSubscription\n  } = event;\n  if (!newSubscription) {\n    // Subscription revoked, delete token\n    await deleteTokenInternal(messaging);\n    return;\n  }\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  await deleteTokenInternal(messaging);\n  messaging.vapidKey = (_b = (_a = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a === void 0 ? void 0 : _a.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY;\n  await getTokenInternal(messaging);\n}\nasync function onPush(event, messaging) {\n  const internalPayload = getMessagePayloadInternal(event);\n  if (!internalPayload) {\n    // Failed to get parsed MessagePayload from the PushEvent. Skip handling the push.\n    return;\n  }\n  // log to Firelog with user consent\n  if (messaging.deliveryMetricsExportedToBigQueryEnabled) {\n    await stageLog(messaging, internalPayload);\n  }\n  // foreground handling: eventually passed to onMessage hook\n  const clientList = await getClientList();\n  if (hasVisibleClients(clientList)) {\n    return sendMessagePayloadInternalToWindows(clientList, internalPayload);\n  }\n  // background handling: display if possible and pass to onBackgroundMessage hook\n  if (!!internalPayload.notification) {\n    await showNotification(wrapInternalPayload(internalPayload));\n  }\n  if (!messaging) {\n    return;\n  }\n  if (!!messaging.onBackgroundMessageHandler) {\n    const payload = externalizePayload(internalPayload);\n    if (typeof messaging.onBackgroundMessageHandler === 'function') {\n      await messaging.onBackgroundMessageHandler(payload);\n    } else {\n      messaging.onBackgroundMessageHandler.next(payload);\n    }\n  }\n}\nasync function onNotificationClick(event) {\n  var _a, _b;\n  const internalPayload = (_b = (_a = event.notification) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b[FCM_MSG];\n  if (!internalPayload) {\n    return;\n  } else if (event.action) {\n    // User clicked on an action button. This will allow developers to act on action button clicks\n    // by using a custom onNotificationClick listener that they define.\n    return;\n  }\n  // Prevent other listeners from receiving the event\n  event.stopImmediatePropagation();\n  event.notification.close();\n  // Note clicking on a notification with no link set will focus the Chrome's current tab.\n  const link = getLink(internalPayload);\n  if (!link) {\n    return;\n  }\n  // FM should only open/focus links from app's origin.\n  const url = new URL(link, self.location.href);\n  const originUrl = new URL(self.location.origin);\n  if (url.host !== originUrl.host) {\n    return;\n  }\n  let client = await getWindowClient(url);\n  if (!client) {\n    client = await self.clients.openWindow(link);\n    // Wait three seconds for the client to initialize and set up the message handler so that it\n    // can receive the message.\n    await sleep(3000);\n  } else {\n    client = await client.focus();\n  }\n  if (!client) {\n    // Window Client will not be returned if it's for a third party origin.\n    return;\n  }\n  internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;\n  internalPayload.isFirebaseMessaging = true;\n  return client.postMessage(internalPayload);\n}\nfunction wrapInternalPayload(internalPayload) {\n  const wrappedInternalPayload = Object.assign({}, internalPayload.notification);\n  // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM\n  // notification vs a notification from somewhere else (i.e. normal web push or developer generated\n  // notification).\n  wrappedInternalPayload.data = {\n    [FCM_MSG]: internalPayload\n  };\n  return wrappedInternalPayload;\n}\nfunction getMessagePayloadInternal(_ref5) {\n  let {\n    data\n  } = _ref5;\n  if (!data) {\n    return null;\n  }\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n/**\r\n * @param url The URL to look for when focusing a client.\r\n * @return Returns an existing window client or a newly opened WindowClient.\r\n */\nasync function getWindowClient(url) {\n  const clientList = await getClientList();\n  for (const client of clientList) {\n    const clientUrl = new URL(client.url, self.location.href);\n    if (url.host === clientUrl.host) {\n      return client;\n    }\n  }\n  return null;\n}\n/**\r\n * @returns If there is currently a visible WindowClient, this method will resolve to true,\r\n * otherwise false.\r\n */\nfunction hasVisibleClients(clientList) {\n  return clientList.some(client => client.visibilityState === 'visible' &&\n  // Ignore chrome-extension clients as that matches the background pages of extensions, which\n  // are always considered visible for some reason.\n  !client.url.startsWith('chrome-extension://'));\n}\nfunction sendMessagePayloadInternalToWindows(clientList, internalPayload) {\n  internalPayload.isFirebaseMessaging = true;\n  internalPayload.messageType = MessageType.PUSH_RECEIVED;\n  for (const client of clientList) {\n    client.postMessage(internalPayload);\n  }\n}\nfunction getClientList() {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n    // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n  });\n}\n\nfunction showNotification(notificationPayloadInternal) {\n  var _a;\n  // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n  const {\n    actions\n  } = notificationPayloadInternal;\n  const {\n    maxActions\n  } = Notification;\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(`This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`);\n  }\n  return self.registration.showNotification( /* title= */(_a = notificationPayloadInternal.title) !== null && _a !== void 0 ? _a : '', notificationPayloadInternal);\n}\nfunction getLink(payload) {\n  var _a, _b, _c;\n  // eslint-disable-next-line camelcase\n  const link = (_b = (_a = payload.fcmOptions) === null || _a === void 0 ? void 0 : _a.link) !== null && _b !== void 0 ? _b : (_c = payload.notification) === null || _c === void 0 ? void 0 : _c.click_action;\n  if (link) {\n    return link;\n  }\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction extractAppConfig(app) {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n  // Required app config keys\n  const configKeys = ['projectId', 'apiKey', 'appId', 'messagingSenderId'];\n  const {\n    options\n  } = app;\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n  return {\n    appName: app.name,\n    projectId: options.projectId,\n    apiKey: options.apiKey,\n    appId: options.appId,\n    senderId: options.messagingSenderId\n  };\n}\nfunction getMissingValueError(valueName) {\n  return ERROR_FACTORY.create(\"missing-app-config-values\" /* ErrorCode.MISSING_APP_CONFIG_VALUES */, {\n    valueName\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass MessagingService {\n  constructor(app, installations, analyticsProvider) {\n    // logging is only done with end user consent. Default to false.\n    this.deliveryMetricsExportedToBigQueryEnabled = false;\n    this.onBackgroundMessageHandler = null;\n    this.onMessageHandler = null;\n    this.logEvents = [];\n    this.isLogServiceStarted = false;\n    const appConfig = extractAppConfig(app);\n    this.firebaseDependencies = {\n      app,\n      appConfig,\n      installations,\n      analyticsProvider\n    };\n  }\n  _delete() {\n    return Promise.resolve();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst SwMessagingFactory = container => {\n  const messaging = new MessagingService(container.getProvider('app').getImmediate(), container.getProvider('installations-internal').getImmediate(), container.getProvider('analytics-internal'));\n  self.addEventListener('push', e => {\n    e.waitUntil(onPush(e, messaging));\n  });\n  self.addEventListener('pushsubscriptionchange', e => {\n    e.waitUntil(onSubChange(e, messaging));\n  });\n  self.addEventListener('notificationclick', e => {\n    e.waitUntil(onNotificationClick(e));\n  });\n  return messaging;\n};\n/**\r\n * The messaging instance registered in sw is named differently than that of in client. This is\r\n * because both `registerMessagingInWindow` and `registerMessagingInSw` would be called in\r\n * `messaging-compat` and component with the same name can only be registered once.\r\n */\nfunction registerMessagingInSw() {\n  _registerComponent(new Component('messaging-sw', SwMessagingFactory, \"PUBLIC\" /* ComponentType.PUBLIC */));\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Checks whether all required APIs exist within SW Context\r\n * @returns a Promise that resolves to a boolean.\r\n *\r\n * @public\r\n */\nasync function isSwSupported() {\n  // firebase-js-sdk/issues/2393 reveals that idb#open in Safari iframe and Firefox private browsing\n  // might be prohibited to run. In these contexts, an error would be thrown during the messaging\n  // instantiating phase, informing the developers to import/call isSupported for special handling.\n  return isIndexedDBAvailable() && (await validateIndexedDBOpenable()) && 'PushManager' in self && 'Notification' in self && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction onBackgroundMessage$1(messaging, nextOrObserver) {\n  if (self.document !== undefined) {\n    throw ERROR_FACTORY.create(\"only-available-in-sw\" /* ErrorCode.AVAILABLE_IN_SW */);\n  }\n\n  messaging.onBackgroundMessageHandler = nextOrObserver;\n  return () => {\n    messaging.onBackgroundMessageHandler = null;\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _setDeliveryMetricsExportedToBigQueryEnabled(messaging, enable) {\n  messaging.deliveryMetricsExportedToBigQueryEnabled = enable;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Retrieves a Firebase Cloud Messaging instance.\r\n *\r\n * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.\r\n *\r\n * @public\r\n */\nfunction getMessagingInSw() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  // Conscious decision to make this async check non-blocking during the messaging instance\n  // initialization phase for performance consideration. An error would be thrown latter for\n  // developer's information. Developers can then choose to import and call `isSupported` for\n  // special handling.\n  isSwSupported().then(isSupported => {\n    // If `isSwSupported()` resolved, but returned false.\n    if (!isSupported) {\n      throw ERROR_FACTORY.create(\"unsupported-browser\" /* ErrorCode.UNSUPPORTED_BROWSER */);\n    }\n  }, _ => {\n    // If `isSwSupported()` rejected.\n    throw ERROR_FACTORY.create(\"indexed-db-unsupported\" /* ErrorCode.INDEXED_DB_UNSUPPORTED */);\n  });\n\n  return _getProvider(getModularInstance(app), 'messaging-sw').getImmediate();\n}\n/**\r\n * Called when a message is received while the app is in the background. An app is considered to be\r\n * in the background if no active window is displayed.\r\n *\r\n * @param messaging - The {@link Messaging} instance.\r\n * @param nextOrObserver - This function, or observer object with `next` defined, is called when a\r\n * message is received and the app is currently in the background.\r\n *\r\n * @returns To stop listening for messages execute this returned function\r\n *\r\n * @public\r\n */\nfunction onBackgroundMessage(messaging, nextOrObserver) {\n  messaging = getModularInstance(messaging);\n  return onBackgroundMessage$1(messaging, nextOrObserver);\n}\n/**\r\n * Enables or disables Firebase Cloud Messaging message delivery metrics export to BigQuery. By\r\n * default, message delivery metrics are not exported to BigQuery. Use this method to enable or\r\n * disable the export at runtime.\r\n *\r\n * @param messaging - The `FirebaseMessaging` instance.\r\n * @param enable - Whether Firebase Cloud Messaging should export message delivery metrics to\r\n * BigQuery.\r\n *\r\n * @public\r\n */\nfunction experimentalSetDeliveryMetricsExportedToBigQueryEnabled(messaging, enable) {\n  messaging = getModularInstance(messaging);\n  return _setDeliveryMetricsExportedToBigQueryEnabled(messaging, enable);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nregisterMessagingInSw();\nexport { experimentalSetDeliveryMetricsExportedToBigQueryEnabled, getMessagingInSw as getMessaging, isSwSupported as isSupported, onBackgroundMessage };","map":{"version":3,"mappings":"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","names":["DEFAULT_VAPID_KEY","ENDPOINT","FCM_MSG","CONSOLE_CAMPAIGN_ID","SDK_PLATFORM_WEB","EVENT_MESSAGE_DELIVERED","MessageType","arrayToBase64","array","uint8Array","Uint8Array","base64String","btoa","String","fromCharCode","replace","base64ToArray","padding","repeat","length","base64","rawData","atob","outputArray","i","charCodeAt","OLD_DB_NAME","OLD_DB_VERSION","OLD_OBJECT_STORE_NAME","migrateOldDatabase","senderId","indexedDB","databases","dbNames","map","db","name","includes","tokenDetails","openDB","upgrade","oldVersion","newVersion","upgradeTransaction","objectStoreNames","contains","objectStore","value","index","get","clear","oldDetails","auth","p256dh","endpoint","token","fcmToken","createTime","now","subscriptionOptions","swScope","vapidKey","close","deleteDB","checkTokenDetails","DATABASE_NAME","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","getDbPromise","upgradeDb","createObjectStore","dbGet","firebaseDependencies","key","getKey","transaction","oldTokenDetails","appConfig","dbSet","tx","put","done","dbRemove","delete","appId","ERROR_MAP","ERROR_FACTORY","ErrorFactory","requestGetToken","headers","getHeaders","body","getBody","subscribeOptions","method","JSON","stringify","responseData","response","fetch","getEndpoint","json","err","create","errorInfo","toString","error","message","requestUpdateToken","updateOptions","requestDeleteToken","unsubscribeOptions","projectId","installations","authToken","getToken","Headers","Accept","apiKey","web","applicationPubKey","TOKEN_EXPIRATION_MS","getTokenInternal","messaging","pushSubscription","getPushSubscription","swRegistration","scope","getNewToken","isTokenValid","e","console","warn","Date","updateToken","deleteTokenInternal","pushManager","getSubscription","unsubscribe","updatedToken","updatedTokenDetails","subscription","subscribe","userVisibleOnly","applicationServerKey","dbOptions","currentOptions","isVapidKeyEqual","isEndpointEqual","isAuthEqual","isP256dhEqual","externalizePayload","internalPayload","payload","from","collapseKey","collapse_key","messageId","fcmMessageId","propagateNotificationPayload","propagateDataPayload","propagateFcmOptions","messagePayloadInternal","notification","title","image","icon","data","fcmOptions","link","click_action","analyticsLabel","analytics_label","isConsoleMessage","sleep","ms","Promise","resolve","setTimeout","_mergeStrings","stageLog","fcmEvent","createFcmEvent","getId","createAndEnqueueLogEvent","fid","project_number","message_id","instance_id","message_type","DISPLAY_NOTIFICATION","DATA_MESSAGE","sdk_platform","package_name","self","origin","event","logEvent","event_time_ms","Math","floor","source_extension_json_proto3","logEvents","push","s1","s2","resultArray","charAt","join","onSubChange","newSubscription","onPush","getMessagePayloadInternal","deliveryMetricsExportedToBigQueryEnabled","clientList","getClientList","hasVisibleClients","sendMessagePayloadInternalToWindows","showNotification","wrapInternalPayload","onBackgroundMessageHandler","next","onNotificationClick","action","stopImmediatePropagation","getLink","url","URL","location","href","originUrl","host","client","getWindowClient","clients","openWindow","focus","messageType","NOTIFICATION_CLICKED","isFirebaseMessaging","postMessage","wrappedInternalPayload","Object","clientUrl","some","visibilityState","startsWith","PUSH_RECEIVED","matchAll","type","includeUncontrolled","notificationPayloadInternal","actions","maxActions","Notification","registration","extractAppConfig","app","options","getMissingValueError","configKeys","keyName","appName","messagingSenderId","valueName","MessagingService","constructor","analyticsProvider","_delete","SwMessagingFactory","container","getProvider","getImmediate","addEventListener","waitUntil","registerMessagingInSw","_registerComponent","Component","isSwSupported","isIndexedDBAvailable","validateIndexedDBOpenable","ServiceWorkerRegistration","prototype","hasOwnProperty","PushSubscription","nextOrObserver","document","undefined","enable","getApp","then","isSupported","_","_getProvider","getModularInstance","_onBackgroundMessage","_setDeliveryMetricsExportedToBigQueryEnabled"],"sources":["/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/util/constants.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/interfaces/internal-message-payload.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/helpers/array-base64-translator.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/helpers/migrate-old-database.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/internals/idb-manager.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/util/errors.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/internals/requests.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/internals/token-manager.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/helpers/externalizePayload.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/helpers/is-console-message.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/helpers/sleep.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/helpers/logToFirelog.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/listeners/sw-listeners.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/helpers/extract-app-config.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/messaging-service.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/helpers/register.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/api/isSupported.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/api/onBackgroundMessage.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/api/setDeliveryMetricsExportedToBigQueryEnabled.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/api.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging/src/index.sw.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nexport const DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\nexport const DEFAULT_VAPID_KEY =\n  'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\n\nexport const ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n\n/** Key of FCM Payload in Notification's data field. */\nexport const FCM_MSG = 'FCM_MSG';\n\nexport const CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nexport const CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\nexport const CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\n/** Set to '1' if Analytics is enabled for the campaign */\nexport const CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\nexport const TAG = 'FirebaseMessaging: ';\nexport const MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST = 1000;\nexport const MAX_RETRIES = 3;\nexport const LOG_INTERVAL_IN_MS = 86400000; //24 hour\nexport const DEFAULT_BACKOFF_TIME_MS = 5000;\n\n// FCM log source name registered at Firelog: 'FCM_CLIENT_EVENT_LOGGING'. It uniquely identifies\n// FCM's logging configuration.\nexport const FCM_LOG_SOURCE = 1249;\n\n// Defined as in proto/messaging_event.proto. Neglecting fields that are supported.\nexport const SDK_PLATFORM_WEB = 3;\nexport const EVENT_MESSAGE_DELIVERED = 1;\n\nexport enum MessageType {\n  DATA_MESSAGE = 1,\n  DISPLAY_NOTIFICATION = 3\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME\n} from '../util/constants';\n\nexport interface MessagePayloadInternal {\n  notification?: NotificationPayloadInternal;\n  data?: unknown;\n  fcmOptions?: FcmOptionsInternal;\n  messageType?: MessageType;\n  isFirebaseMessaging?: boolean;\n  from: string;\n  fcmMessageId: string;\n  // eslint-disable-next-line camelcase\n  collapse_key: string;\n}\n\nexport interface NotificationPayloadInternal extends NotificationOptions {\n  title: string;\n  // Supported in the Legacy Send API.\n  // See:https://firebase.google.com/docs/cloud-messaging/xmpp-server-ref.\n  // eslint-disable-next-line camelcase\n  click_action?: string;\n  icon?: string;\n}\n\n// Defined in\n// https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#webpushfcmoptions. Note\n// that the keys are sent to the clients in snake cases which we need to convert to camel so it can\n// be exposed as a type to match the Firebase API convention.\nexport interface FcmOptionsInternal {\n  link?: string;\n\n  // eslint-disable-next-line camelcase\n  analytics_label?: string;\n}\n\nexport enum MessageType {\n  PUSH_RECEIVED = 'push-received',\n  NOTIFICATION_CLICKED = 'notification-clicked'\n}\n\n/** Additional data of a message sent from the FN Console. */\nexport interface ConsoleMessageData {\n  [CONSOLE_CAMPAIGN_ID]: string;\n  [CONSOLE_CAMPAIGN_TIME]: string;\n  [CONSOLE_CAMPAIGN_NAME]?: string;\n  [CONSOLE_CAMPAIGN_ANALYTICS_ENABLED]?: '1';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function arrayToBase64(array: Uint8Array | ArrayBuffer): string {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nexport function base64ToArray(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteDB, openDB } from 'idb';\n\nimport { TokenDetails } from '../interfaces/token-details';\nimport { arrayToBase64 } from './array-base64-translator';\n\n// https://github.com/firebase/firebase-js-sdk/blob/7857c212f944a2a9eb421fd4cb7370181bc034b5/packages/messaging/src/interfaces/token-details.ts\nexport interface V2TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: string | Uint8Array;\n  subscription: PushSubscription;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  createTime?: number;\n  endpoint?: string;\n  auth?: string;\n  p256dh?: string;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/6b5b15ce4ea3df5df5df8a8b33a4e41e249c7715/packages/messaging/src/interfaces/token-details.ts\nexport interface V3TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  endpoint: string;\n  auth: ArrayBuffer;\n  p256dh: ArrayBuffer;\n  createTime: number;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/9567dba664732f681fa7fe60f5b7032bb1daf4c9/packages/messaging/src/interfaces/token-details.ts\nexport interface V4TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  endpoint: string;\n  auth: ArrayBufferLike;\n  p256dh: ArrayBufferLike;\n  createTime: number;\n}\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\n * callback is called for all versions of the old DB.\n */\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nexport async function migrateOldDatabase(\n  senderId: string\n): Promise<TokenDetails | null> {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\n    // typecast when it lands in TS types.\n    const databases = await (\n      indexedDB as {\n        databases(): Promise<Array<{ name: string; version: number }>>;\n      }\n    ).databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n\n  let tokenDetails: TokenDetails | null = null;\n\n  const db = await openDB(OLD_DB_NAME, OLD_DB_VERSION, {\n    upgrade: async (db, oldVersion, newVersion, upgradeTransaction) => {\n      if (oldVersion < 2) {\n        // Database too old, skip migration.\n        return;\n      }\n\n      if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n        // Database did not exist. Nothing to do.\n        return;\n      }\n\n      const objectStore = upgradeTransaction.objectStore(OLD_OBJECT_STORE_NAME);\n      const value = await objectStore.index('fcmSenderId').get(senderId);\n      await objectStore.clear();\n\n      if (!value) {\n        // No entry in the database, nothing to migrate.\n        return;\n      }\n\n      if (oldVersion === 2) {\n        const oldDetails = value as V2TokenDetails;\n\n        if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n          return;\n        }\n\n        tokenDetails = {\n          token: oldDetails.fcmToken,\n          createTime: oldDetails.createTime ?? Date.now(),\n          subscriptionOptions: {\n            auth: oldDetails.auth,\n            p256dh: oldDetails.p256dh,\n            endpoint: oldDetails.endpoint,\n            swScope: oldDetails.swScope,\n            vapidKey:\n              typeof oldDetails.vapidKey === 'string'\n                ? oldDetails.vapidKey\n                : arrayToBase64(oldDetails.vapidKey)\n          }\n        };\n      } else if (oldVersion === 3) {\n        const oldDetails = value as V3TokenDetails;\n\n        tokenDetails = {\n          token: oldDetails.fcmToken,\n          createTime: oldDetails.createTime,\n          subscriptionOptions: {\n            auth: arrayToBase64(oldDetails.auth),\n            p256dh: arrayToBase64(oldDetails.p256dh),\n            endpoint: oldDetails.endpoint,\n            swScope: oldDetails.swScope,\n            vapidKey: arrayToBase64(oldDetails.vapidKey)\n          }\n        };\n      } else if (oldVersion === 4) {\n        const oldDetails = value as V4TokenDetails;\n\n        tokenDetails = {\n          token: oldDetails.fcmToken,\n          createTime: oldDetails.createTime,\n          subscriptionOptions: {\n            auth: arrayToBase64(oldDetails.auth),\n            p256dh: arrayToBase64(oldDetails.p256dh),\n            endpoint: oldDetails.endpoint,\n            swScope: oldDetails.swScope,\n            vapidKey: arrayToBase64(oldDetails.vapidKey)\n          }\n        };\n      }\n    }\n  });\n  db.close();\n\n  // Delete all old databases.\n  await deleteDB(OLD_DB_NAME);\n  await deleteDB('fcm_vapid_details_db');\n  await deleteDB('undefined');\n\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(\n  tokenDetails: TokenDetails | null\n): tokenDetails is TokenDetails {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n  const { subscriptionOptions } = tokenDetails;\n  return (\n    typeof tokenDetails.createTime === 'number' &&\n    tokenDetails.createTime > 0 &&\n    typeof tokenDetails.token === 'string' &&\n    tokenDetails.token.length > 0 &&\n    typeof subscriptionOptions.auth === 'string' &&\n    subscriptionOptions.auth.length > 0 &&\n    typeof subscriptionOptions.p256dh === 'string' &&\n    subscriptionOptions.p256dh.length > 0 &&\n    typeof subscriptionOptions.endpoint === 'string' &&\n    subscriptionOptions.endpoint.length > 0 &&\n    typeof subscriptionOptions.swScope === 'string' &&\n    subscriptionOptions.swScope.length > 0 &&\n    typeof subscriptionOptions.vapidKey === 'string' &&\n    subscriptionOptions.vapidKey.length > 0\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DBSchema, IDBPDatabase, deleteDB, openDB } from 'idb';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { TokenDetails } from '../interfaces/token-details';\nimport { migrateOldDatabase } from '../helpers/migrate-old-database';\n\n// Exported for tests.\nexport const DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\n\ninterface MessagingDB extends DBSchema {\n  'firebase-messaging-store': {\n    key: string;\n    value: TokenDetails;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<MessagingDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<MessagingDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (upgradeDb, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n        // because if there are multiple versions between the old version and the current version, we\n        // want ALL the migrations that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function dbGet(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<TokenDetails | undefined> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = (await db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key)) as TokenDetails;\n\n  if (tokenDetails) {\n    return tokenDetails;\n  } else {\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(\n      firebaseDependencies.appConfig.senderId\n    );\n    if (oldTokenDetails) {\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n    }\n  }\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function dbSet(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<TokenDetails> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.done;\n  return tokenDetails;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function dbRemove(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<void> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n\n/** Deletes the DB. Useful for tests. */\nexport async function dbDelete(): Promise<void> {\n  if (dbPromise) {\n    (await dbPromise).close();\n    await deleteDB(DATABASE_NAME);\n    dbPromise = null;\n  }\n}\n\nfunction getKey({ appConfig }: FirebaseInternalDependencies): string {\n  return appConfig.appId;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  AVAILABLE_IN_WINDOW = 'only-available-in-window',\n  AVAILABLE_IN_SW = 'only-available-in-sw',\n  PERMISSION_DEFAULT = 'permission-default',\n  PERMISSION_BLOCKED = 'permission-blocked',\n  UNSUPPORTED_BROWSER = 'unsupported-browser',\n  INDEXED_DB_UNSUPPORTED = 'indexed-db-unsupported',\n  FAILED_DEFAULT_REGISTRATION = 'failed-service-worker-registration',\n  TOKEN_SUBSCRIBE_FAILED = 'token-subscribe-failed',\n  TOKEN_SUBSCRIBE_NO_TOKEN = 'token-subscribe-no-token',\n  TOKEN_UNSUBSCRIBE_FAILED = 'token-unsubscribe-failed',\n  TOKEN_UPDATE_FAILED = 'token-update-failed',\n  TOKEN_UPDATE_NO_TOKEN = 'token-update-no-token',\n  INVALID_BG_HANDLER = 'invalid-bg-handler',\n  USE_SW_AFTER_GET_TOKEN = 'use-sw-after-get-token',\n  INVALID_SW_REGISTRATION = 'invalid-sw-registration',\n  USE_VAPID_KEY_AFTER_GET_TOKEN = 'use-vapid-key-after-get-token',\n  INVALID_VAPID_KEY = 'invalid-vapid-key'\n}\n\nexport const ERROR_MAP: ErrorMap<ErrorCode> = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.AVAILABLE_IN_WINDOW]:\n    'This method is available in a Window context.',\n  [ErrorCode.AVAILABLE_IN_SW]:\n    'This method is available in a service worker context.',\n  [ErrorCode.PERMISSION_DEFAULT]:\n    'The notification permission was not granted and dismissed instead.',\n  [ErrorCode.PERMISSION_BLOCKED]:\n    'The notification permission was not granted and blocked instead.',\n  [ErrorCode.UNSUPPORTED_BROWSER]:\n    \"This browser doesn't support the API's required to use the Firebase SDK.\",\n  [ErrorCode.INDEXED_DB_UNSUPPORTED]:\n    \"This browser doesn't support indexedDb.open() (ex. Safari iFrame, Firefox Private Browsing, etc)\",\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]:\n    'We are unable to register the default service worker. {$browserErrorMessage}',\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]:\n    'A problem occurred while subscribing the user to FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN]:\n    'FCM returned no token when subscribing the user to push.',\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]:\n    'A problem occurred while unsubscribing the ' +\n    'user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_FAILED]:\n    'A problem occurred while updating the user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_NO_TOKEN]:\n    'FCM returned no token when updating the user to push.',\n  [ErrorCode.USE_SW_AFTER_GET_TOKEN]:\n    'The useServiceWorker() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your service worker is used.',\n  [ErrorCode.INVALID_SW_REGISTRATION]:\n    'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [ErrorCode.INVALID_BG_HANDLER]:\n    'The input to setBackgroundMessageHandler() must be a function.',\n  [ErrorCode.INVALID_VAPID_KEY]: 'The public VAPID key must be a string.',\n  [ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN]:\n    'The usePublicVapidKey() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your VAPID key is used.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]: { browserErrorMessage: string };\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UPDATE_FAILED]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'messaging',\n  'Messaging',\n  ERROR_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, ENDPOINT } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\nexport interface ApiResponse {\n  token?: string;\n  error?: { message: string };\n}\n\nexport interface ApiRequestBody {\n  web: {\n    endpoint: string;\n    p256dh: string;\n    auth: string;\n    applicationPubKey?: string;\n  };\n}\n\nexport async function requestGetToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      getEndpoint(firebaseDependencies.appConfig),\n      subscribeOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: (err as Error)?.toString()\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestUpdateToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions!);\n\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`,\n      updateOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: (err as Error)?.toString()\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestDeleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  token: string\n): Promise<void> {\n  const headers = await getHeaders(firebaseDependencies);\n\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${token}`,\n      unsubscribeOptions\n    );\n    const responseData: ApiResponse = await response.json();\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n      errorInfo: (err as Error)?.toString()\n    });\n  }\n}\n\nfunction getEndpoint({ projectId }: AppConfig): string {\n  return `${ENDPOINT}/projects/${projectId!}/registrations`;\n}\n\nasync function getHeaders({\n  appConfig,\n  installations\n}: FirebaseInternalDependencies): Promise<Headers> {\n  const authToken = await installations.getToken();\n\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey!,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\n\nfunction getBody({\n  p256dh,\n  auth,\n  endpoint,\n  vapidKey\n}: SubscriptionOptions): ApiRequestBody {\n  const body: ApiRequestBody = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\nimport {\n  arrayToBase64,\n  base64ToArray\n} from '../helpers/array-base64-translator';\nimport { dbGet, dbRemove, dbSet } from './idb-manager';\nimport {\n  requestDeleteToken,\n  requestGetToken,\n  requestUpdateToken\n} from './requests';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { MessagingService } from '../messaging-service';\n\n// UpdateRegistration will be called once every week.\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport async function getTokenInternal(\n  messaging: MessagingService\n): Promise<string> {\n  const pushSubscription = await getPushSubscription(\n    messaging.swRegistration!,\n    messaging.vapidKey!\n  );\n\n  const subscriptionOptions: SubscriptionOptions = {\n    vapidKey: messaging.vapidKey!,\n    swScope: messaging.swRegistration!.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')!),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh')!)\n  };\n\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(messaging.firebaseDependencies, subscriptionOptions);\n  } else if (\n    !isTokenValid(tokenDetails.subscriptionOptions!, subscriptionOptions)\n  ) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(\n        messaging.firebaseDependencies!,\n        tokenDetails.token\n      );\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n\n    return getNewToken(messaging.firebaseDependencies!, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(messaging, {\n      token: tokenDetails.token,\n      createTime: Date.now(),\n      subscriptionOptions\n    });\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n\n/**\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\n * the push subscription if it exists.\n */\nexport async function deleteTokenInternal(\n  messaging: MessagingService\n): Promise<boolean> {\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  if (tokenDetails) {\n    await requestDeleteToken(\n      messaging.firebaseDependencies,\n      tokenDetails.token\n    );\n    await dbRemove(messaging.firebaseDependencies);\n  }\n\n  // Unsubscribe from the push subscription.\n  const pushSubscription =\n    await messaging.swRegistration!.pushManager.getSubscription();\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  }\n\n  // If there's no SW, consider it a success.\n  return true;\n}\n\nasync function updateToken(\n  messaging: MessagingService,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  try {\n    const updatedToken = await requestUpdateToken(\n      messaging.firebaseDependencies,\n      tokenDetails\n    );\n\n    const updatedTokenDetails: TokenDetails = {\n      ...tokenDetails,\n      token: updatedToken,\n      createTime: Date.now()\n    };\n\n    await dbSet(messaging.firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteTokenInternal(messaging);\n    throw e;\n  }\n}\n\nasync function getNewToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const token = await requestGetToken(\n    firebaseDependencies,\n    subscriptionOptions\n  );\n  const tokenDetails: TokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n\n/**\n * Gets a PushSubscription for the current user.\n */\nasync function getPushSubscription(\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<PushSubscription> {\n  const subscription = await swRegistration.pushManager.getSubscription();\n  if (subscription) {\n    return subscription;\n  }\n\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n  });\n}\n\n/**\n * Checks if the saved tokenDetails object matches the configuration provided.\n */\nfunction isTokenValid(\n  dbOptions: SubscriptionOptions,\n  currentOptions: SubscriptionOptions\n): boolean {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MessagePayload } from '../interfaces/public-types';\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\n\nexport function externalizePayload(\n  internalPayload: MessagePayloadInternal\n): MessagePayload {\n  const payload: MessagePayload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key,\n    // eslint-disable-next-line camelcase\n    messageId: internalPayload.fcmMessageId\n  } as MessagePayload;\n\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n\n  return payload;\n}\n\nfunction propagateNotificationPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n\n  payload.notification = {};\n\n  const title = messagePayloadInternal.notification!.title;\n  if (!!title) {\n    payload.notification!.title = title;\n  }\n\n  const body = messagePayloadInternal.notification!.body;\n  if (!!body) {\n    payload.notification!.body = body;\n  }\n\n  const image = messagePayloadInternal.notification!.image;\n  if (!!image) {\n    payload.notification!.image = image;\n  }\n\n  const icon = messagePayloadInternal.notification!.icon;\n  if (!!icon) {\n    payload.notification!.icon = icon;\n  }\n}\n\nfunction propagateDataPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n\n  payload.data = messagePayloadInternal.data as { [key: string]: string };\n}\n\nfunction propagateFcmOptions(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  // fcmOptions.link value is written into notification.click_action. see more in b/232072111\n  if (\n    !messagePayloadInternal.fcmOptions &&\n    !messagePayloadInternal.notification?.click_action\n  ) {\n    return;\n  }\n\n  payload.fcmOptions = {};\n\n  const link =\n    messagePayloadInternal.fcmOptions?.link ??\n    messagePayloadInternal.notification?.click_action;\n\n  if (!!link) {\n    payload.fcmOptions!.link = link;\n  }\n\n  // eslint-disable-next-line camelcase\n  const analyticsLabel = messagePayloadInternal.fcmOptions?.analytics_label;\n  if (!!analyticsLabel) {\n    payload.fcmOptions!.analyticsLabel = analyticsLabel;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSOLE_CAMPAIGN_ID } from '../util/constants';\nimport { ConsoleMessageData } from '../interfaces/internal-message-payload';\n\nexport function isConsoleMessage(data: unknown): data is ConsoleMessageData {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_BACKOFF_TIME_MS,\n  EVENT_MESSAGE_DELIVERED,\n  FCM_LOG_SOURCE,\n  LOG_INTERVAL_IN_MS,\n  MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST,\n  MAX_RETRIES,\n  MessageType,\n  SDK_PLATFORM_WEB\n} from '../util/constants';\nimport {\n  FcmEvent,\n  LogEvent,\n  LogRequest,\n  LogResponse\n} from '../interfaces/logging-types';\n\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\nimport { MessagingService } from '../messaging-service';\n\nconst FIRELOG_ENDPOINT = _mergeStrings(\n  'hts/frbslgigp.ogepscmv/ieo/eaylg',\n  'tp:/ieaeogn-agolai.o/1frlglgc/o'\n);\n\nconst FCM_TRANSPORT_KEY = _mergeStrings(\n  'AzSCbw63g1R0nCw85jG8',\n  'Iaya3yLKwmgvh7cF0q4'\n);\n\nexport function startLoggingService(messaging: MessagingService): void {\n  if (!messaging.isLogServiceStarted) {\n    _processQueue(messaging, LOG_INTERVAL_IN_MS);\n    messaging.isLogServiceStarted = true;\n  }\n}\n\n/**\n *\n * @param messaging the messaging instance.\n * @param offsetInMs this method execute after `offsetInMs` elapsed .\n */\nexport function _processQueue(\n  messaging: MessagingService,\n  offsetInMs: number\n): void {\n  setTimeout(async () => {\n    if (!messaging.deliveryMetricsExportedToBigQueryEnabled) {\n      // flush events and terminate logging service\n      messaging.logEvents = [];\n      messaging.isLogServiceStarted = false;\n\n      return;\n    }\n\n    if (!messaging.logEvents.length) {\n      return _processQueue(messaging, LOG_INTERVAL_IN_MS);\n    }\n\n    await _dispatchLogEvents(messaging);\n  }, offsetInMs);\n}\n\nexport async function _dispatchLogEvents(\n  messaging: MessagingService\n): Promise<void> {\n  for (\n    let i = 0, n = messaging.logEvents.length;\n    i < n;\n    i += MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST\n  ) {\n    const logRequest = _createLogRequest(\n      messaging.logEvents.slice(i, i + MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST)\n    );\n\n    let retryCount = 0,\n      response = {} as Response;\n\n    do {\n      try {\n        response = await fetch(\n          FIRELOG_ENDPOINT.concat('?key=', FCM_TRANSPORT_KEY),\n          {\n            method: 'POST',\n            body: JSON.stringify(logRequest)\n          }\n        );\n\n        // don't retry on 200s or non retriable errors\n        if (response.ok || (!response.ok && !isRetriableError(response))) {\n          break;\n        }\n\n        if (!response.ok && isRetriableError(response)) {\n          // rethrow to retry with quota\n          throw new Error(\n            'a retriable Non-200 code is returned in fetch to Firelog endpoint. Retry'\n          );\n        }\n      } catch (error) {\n        const isLastAttempt = retryCount === MAX_RETRIES;\n        if (isLastAttempt) {\n          // existing the do-while interactive retry logic because retry quota has reached.\n          break;\n        }\n      }\n\n      let delayInMs: number;\n      try {\n        delayInMs = Number(\n          ((await response.json()) as LogResponse).nextRequestWaitMillis\n        );\n      } catch (e) {\n        delayInMs = DEFAULT_BACKOFF_TIME_MS;\n      }\n\n      await new Promise(resolve => setTimeout(resolve, delayInMs));\n\n      retryCount++;\n    } while (retryCount < MAX_RETRIES);\n  }\n\n  messaging.logEvents = [];\n  // schedule for next logging\n  _processQueue(messaging, LOG_INTERVAL_IN_MS);\n}\n\nfunction isRetriableError(response: Response): boolean {\n  const httpStatus = response.status;\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\nexport async function stageLog(\n  messaging: MessagingService,\n  internalPayload: MessagePayloadInternal\n): Promise<void> {\n  const fcmEvent = createFcmEvent(\n    internalPayload,\n    await messaging.firebaseDependencies.installations.getId()\n  );\n\n  createAndEnqueueLogEvent(messaging, fcmEvent);\n}\n\nfunction createFcmEvent(\n  internalPayload: MessagePayloadInternal,\n  fid: string\n): FcmEvent {\n  const fcmEvent = {} as FcmEvent;\n\n  /* eslint-disable camelcase */\n  // some fields should always be non-null. Still check to ensure.\n  if (!!internalPayload.from) {\n    fcmEvent.project_number = internalPayload.from;\n  }\n\n  if (!!internalPayload.fcmMessageId) {\n    fcmEvent.message_id = internalPayload.fcmMessageId;\n  }\n\n  fcmEvent.instance_id = fid;\n\n  if (!!internalPayload.notification) {\n    fcmEvent.message_type = MessageType.DISPLAY_NOTIFICATION.toString();\n  } else {\n    fcmEvent.message_type = MessageType.DATA_MESSAGE.toString();\n  }\n\n  fcmEvent.sdk_platform = SDK_PLATFORM_WEB.toString();\n  fcmEvent.package_name = self.origin.replace(/(^\\w+:|^)\\/\\//, '');\n\n  if (!!internalPayload.collapse_key) {\n    fcmEvent.collapse_key = internalPayload.collapse_key;\n  }\n\n  fcmEvent.event = EVENT_MESSAGE_DELIVERED.toString();\n\n  if (!!internalPayload.fcmOptions?.analytics_label) {\n    fcmEvent.analytics_label = internalPayload.fcmOptions?.analytics_label;\n  }\n\n  /* eslint-enable camelcase */\n  return fcmEvent;\n}\n\nfunction createAndEnqueueLogEvent(\n  messaging: MessagingService,\n  fcmEvent: FcmEvent\n): void {\n  const logEvent = {} as LogEvent;\n\n  /* eslint-disable camelcase */\n  logEvent.event_time_ms = Math.floor(Date.now()).toString();\n  logEvent.source_extension_json_proto3 = JSON.stringify(fcmEvent);\n  // eslint-disable-next-line camelcase\n\n  messaging.logEvents.push(logEvent);\n}\n\nexport function _createLogRequest(logEventQueue: LogEvent[]): LogRequest {\n  const logRequest = {} as LogRequest;\n\n  /* eslint-disable camelcase */\n  logRequest.log_source = FCM_LOG_SOURCE.toString();\n  logRequest.log_event = logEventQueue;\n  /* eslint-enable camelcase */\n\n  return logRequest;\n}\n\nexport function _mergeStrings(s1: string, s2: string): string {\n  const resultArray = [];\n  for (let i = 0; i < s1.length; i++) {\n    resultArray.push(s1.charAt(i));\n    if (i < s2.length) {\n      resultArray.push(s2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, FCM_MSG } from '../util/constants';\nimport {\n  MessagePayloadInternal,\n  MessageType,\n  NotificationPayloadInternal\n} from '../interfaces/internal-message-payload';\nimport {\n  NotificationEvent,\n  PushEvent,\n  PushSubscriptionChangeEvent,\n  ServiceWorkerGlobalScope,\n  WindowClient\n} from '../util/sw-types';\nimport {\n  deleteTokenInternal,\n  getTokenInternal\n} from '../internals/token-manager';\n\nimport { MessagingService } from '../messaging-service';\nimport { dbGet } from '../internals/idb-manager';\nimport { externalizePayload } from '../helpers/externalizePayload';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { sleep } from '../helpers/sleep';\nimport { stageLog } from '../helpers/logToFirelog';\n\n// maxActions is an experimental property and not part of the official\n// TypeScript interface\n// https://developer.mozilla.org/en-US/docs/Web/API/Notification/maxActions\ninterface NotificationExperimental extends Notification {\n  maxActions?: number;\n}\n\n// Let TS know that this is a service worker\ndeclare const self: ServiceWorkerGlobalScope;\n\nexport async function onSubChange(\n  event: PushSubscriptionChangeEvent,\n  messaging: MessagingService\n): Promise<void> {\n  const { newSubscription } = event;\n  if (!newSubscription) {\n    // Subscription revoked, delete token\n    await deleteTokenInternal(messaging);\n    return;\n  }\n\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  await deleteTokenInternal(messaging);\n\n  messaging.vapidKey =\n    tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY;\n  await getTokenInternal(messaging);\n}\n\nexport async function onPush(\n  event: PushEvent,\n  messaging: MessagingService\n): Promise<void> {\n  const internalPayload = getMessagePayloadInternal(event);\n  if (!internalPayload) {\n    // Failed to get parsed MessagePayload from the PushEvent. Skip handling the push.\n    return;\n  }\n\n  // log to Firelog with user consent\n  if (messaging.deliveryMetricsExportedToBigQueryEnabled) {\n    await stageLog(messaging, internalPayload);\n  }\n\n  // foreground handling: eventually passed to onMessage hook\n  const clientList = await getClientList();\n  if (hasVisibleClients(clientList)) {\n    return sendMessagePayloadInternalToWindows(clientList, internalPayload);\n  }\n\n  // background handling: display if possible and pass to onBackgroundMessage hook\n  if (!!internalPayload.notification) {\n    await showNotification(wrapInternalPayload(internalPayload));\n  }\n\n  if (!messaging) {\n    return;\n  }\n\n  if (!!messaging.onBackgroundMessageHandler) {\n    const payload = externalizePayload(internalPayload);\n\n    if (typeof messaging.onBackgroundMessageHandler === 'function') {\n      await messaging.onBackgroundMessageHandler(payload);\n    } else {\n      messaging.onBackgroundMessageHandler.next(payload);\n    }\n  }\n}\n\nexport async function onNotificationClick(\n  event: NotificationEvent\n): Promise<void> {\n  const internalPayload: MessagePayloadInternal =\n    event.notification?.data?.[FCM_MSG];\n\n  if (!internalPayload) {\n    return;\n  } else if (event.action) {\n    // User clicked on an action button. This will allow developers to act on action button clicks\n    // by using a custom onNotificationClick listener that they define.\n    return;\n  }\n\n  // Prevent other listeners from receiving the event\n  event.stopImmediatePropagation();\n  event.notification.close();\n\n  // Note clicking on a notification with no link set will focus the Chrome's current tab.\n  const link = getLink(internalPayload);\n  if (!link) {\n    return;\n  }\n\n  // FM should only open/focus links from app's origin.\n  const url = new URL(link, self.location.href);\n  const originUrl = new URL(self.location.origin);\n\n  if (url.host !== originUrl.host) {\n    return;\n  }\n\n  let client = await getWindowClient(url);\n\n  if (!client) {\n    client = await self.clients.openWindow(link);\n\n    // Wait three seconds for the client to initialize and set up the message handler so that it\n    // can receive the message.\n    await sleep(3000);\n  } else {\n    client = await client.focus();\n  }\n\n  if (!client) {\n    // Window Client will not be returned if it's for a third party origin.\n    return;\n  }\n\n  internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;\n  internalPayload.isFirebaseMessaging = true;\n  return client.postMessage(internalPayload);\n}\n\nfunction wrapInternalPayload(\n  internalPayload: MessagePayloadInternal\n): NotificationPayloadInternal {\n  const wrappedInternalPayload: NotificationPayloadInternal = {\n    ...(internalPayload.notification as unknown as NotificationPayloadInternal)\n  };\n\n  // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM\n  // notification vs a notification from somewhere else (i.e. normal web push or developer generated\n  // notification).\n  wrappedInternalPayload.data = {\n    [FCM_MSG]: internalPayload\n  };\n\n  return wrappedInternalPayload;\n}\n\nfunction getMessagePayloadInternal({\n  data\n}: PushEvent): MessagePayloadInternal | null {\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n\n/**\n * @param url The URL to look for when focusing a client.\n * @return Returns an existing window client or a newly opened WindowClient.\n */\nasync function getWindowClient(url: URL): Promise<WindowClient | null> {\n  const clientList = await getClientList();\n\n  for (const client of clientList) {\n    const clientUrl = new URL(client.url, self.location.href);\n\n    if (url.host === clientUrl.host) {\n      return client;\n    }\n  }\n\n  return null;\n}\n\n/**\n * @returns If there is currently a visible WindowClient, this method will resolve to true,\n * otherwise false.\n */\nfunction hasVisibleClients(clientList: WindowClient[]): boolean {\n  return clientList.some(\n    client =>\n      client.visibilityState === 'visible' &&\n      // Ignore chrome-extension clients as that matches the background pages of extensions, which\n      // are always considered visible for some reason.\n      !client.url.startsWith('chrome-extension://')\n  );\n}\n\nfunction sendMessagePayloadInternalToWindows(\n  clientList: WindowClient[],\n  internalPayload: MessagePayloadInternal\n): void {\n  internalPayload.isFirebaseMessaging = true;\n  internalPayload.messageType = MessageType.PUSH_RECEIVED;\n\n  for (const client of clientList) {\n    client.postMessage(internalPayload);\n  }\n}\n\nfunction getClientList(): Promise<WindowClient[]> {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n    // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n  }) as Promise<WindowClient[]>;\n}\n\nfunction showNotification(\n  notificationPayloadInternal: NotificationPayloadInternal\n): Promise<void> {\n  // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n  const { actions } = notificationPayloadInternal;\n  const { maxActions } = Notification as unknown as NotificationExperimental;\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\n      `This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`\n    );\n  }\n\n  return self.registration.showNotification(\n    /* title= */ notificationPayloadInternal.title ?? '',\n    notificationPayloadInternal\n  );\n}\n\nfunction getLink(payload: MessagePayloadInternal): string | null {\n  // eslint-disable-next-line camelcase\n  const link = payload.fcmOptions?.link ?? payload.notification?.click_action;\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseError } from '@firebase/util';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: ReadonlyArray<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId',\n    'messagingSenderId'\n  ];\n\n  const { options } = app;\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId!,\n    apiKey: options.apiKey!,\n    appId: options.appId!,\n    senderId: options.messagingSenderId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport { MessagePayload, NextFn, Observer } from './interfaces/public-types';\n\nimport { FirebaseAnalyticsInternalName } from '@firebase/analytics-interop-types';\nimport { FirebaseInternalDependencies } from './interfaces/internal-dependencies';\nimport { LogEvent } from './interfaces/logging-types';\nimport { Provider } from '@firebase/component';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { extractAppConfig } from './helpers/extract-app-config';\n\nexport class MessagingService implements _FirebaseService {\n  readonly app!: FirebaseApp;\n  readonly firebaseDependencies!: FirebaseInternalDependencies;\n\n  swRegistration?: ServiceWorkerRegistration;\n  vapidKey?: string;\n  // logging is only done with end user consent. Default to false.\n  deliveryMetricsExportedToBigQueryEnabled: boolean = false;\n\n  onBackgroundMessageHandler:\n    | NextFn<MessagePayload>\n    | Observer<MessagePayload>\n    | null = null;\n\n  onMessageHandler: NextFn<MessagePayload> | Observer<MessagePayload> | null =\n    null;\n\n  logEvents: LogEvent[] = [];\n  isLogServiceStarted: boolean = false;\n\n  constructor(\n    app: FirebaseApp,\n    installations: _FirebaseInstallationsInternal,\n    analyticsProvider: Provider<FirebaseAnalyticsInternalName>\n  ) {\n    const appConfig = extractAppConfig(app);\n\n    this.firebaseDependencies = {\n      app,\n      appConfig,\n      installations,\n      analyticsProvider\n    };\n  }\n\n  _delete(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactory\n} from '@firebase/component';\nimport {\n  onNotificationClick,\n  onPush,\n  onSubChange\n} from '../listeners/sw-listeners';\n\nimport { GetTokenOptions } from '../interfaces/public-types';\nimport { MessagingInternal } from '@firebase/messaging-interop-types';\nimport { MessagingService } from '../messaging-service';\nimport { ServiceWorkerGlobalScope } from '../util/sw-types';\nimport { _registerComponent, registerVersion } from '@firebase/app';\nimport { getToken } from '../api/getToken';\nimport { messageEventListener } from '../listeners/window-listener';\n\nimport { name, version } from '../../package.json';\n\nconst WindowMessagingFactory: InstanceFactory<'messaging'> = (\n  container: ComponentContainer\n) => {\n  const messaging = new MessagingService(\n    container.getProvider('app').getImmediate(),\n    container.getProvider('installations-internal').getImmediate(),\n    container.getProvider('analytics-internal')\n  );\n\n  navigator.serviceWorker.addEventListener('message', e =>\n    messageEventListener(messaging as MessagingService, e)\n  );\n\n  return messaging;\n};\n\nconst WindowMessagingInternalFactory: InstanceFactory<'messaging-internal'> = (\n  container: ComponentContainer\n) => {\n  const messaging = container\n    .getProvider('messaging')\n    .getImmediate() as MessagingService;\n\n  const messagingInternal: MessagingInternal = {\n    getToken: (options?: GetTokenOptions) => getToken(messaging, options)\n  };\n\n  return messagingInternal;\n};\n\ndeclare const self: ServiceWorkerGlobalScope;\nconst SwMessagingFactory: InstanceFactory<'messaging'> = (\n  container: ComponentContainer\n) => {\n  const messaging = new MessagingService(\n    container.getProvider('app').getImmediate(),\n    container.getProvider('installations-internal').getImmediate(),\n    container.getProvider('analytics-internal')\n  );\n\n  self.addEventListener('push', e => {\n    e.waitUntil(onPush(e, messaging as MessagingService));\n  });\n  self.addEventListener('pushsubscriptionchange', e => {\n    e.waitUntil(onSubChange(e, messaging as MessagingService));\n  });\n  self.addEventListener('notificationclick', e => {\n    e.waitUntil(onNotificationClick(e));\n  });\n\n  return messaging;\n};\n\nexport function registerMessagingInWindow(): void {\n  _registerComponent(\n    new Component('messaging', WindowMessagingFactory, ComponentType.PUBLIC)\n  );\n\n  _registerComponent(\n    new Component(\n      'messaging-internal',\n      WindowMessagingInternalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\n/**\n * The messaging instance registered in sw is named differently than that of in client. This is\n * because both `registerMessagingInWindow` and `registerMessagingInSw` would be called in\n * `messaging-compat` and component with the same name can only be registered once.\n */\nexport function registerMessagingInSw(): void {\n  _registerComponent(\n    new Component('messaging-sw', SwMessagingFactory, ComponentType.PUBLIC)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  areCookiesEnabled,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\n\n/**\n * Checks if all required APIs exist in the browser.\n * @returns a Promise that resolves to a boolean.\n *\n * @public\n */\nexport async function isWindowSupported(): Promise<boolean> {\n  try {\n    // This throws if open() is unsupported, so adding it to the conditional\n    // statement below can cause an uncaught error.\n    await validateIndexedDBOpenable();\n  } catch (e) {\n    return false;\n  }\n  // firebase-js-sdk/issues/2393 reveals that idb#open in Safari iframe and Firefox private browsing\n  // might be prohibited to run. In these contexts, an error would be thrown during the messaging\n  // instantiating phase, informing the developers to import/call isSupported for special handling.\n  return (\n    typeof window !== 'undefined' &&\n    isIndexedDBAvailable() &&\n    areCookiesEnabled() &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks whether all required APIs exist within SW Context\n * @returns a Promise that resolves to a boolean.\n *\n * @public\n */\nexport async function isSwSupported(): Promise<boolean> {\n  // firebase-js-sdk/issues/2393 reveals that idb#open in Safari iframe and Firefox private browsing\n  // might be prohibited to run. In these contexts, an error would be thrown during the messaging\n  // instantiating phase, informing the developers to import/call isSupported for special handling.\n  return (\n    isIndexedDBAvailable() &&\n    (await validateIndexedDBOpenable()) &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nimport {\n  MessagePayload,\n  NextFn,\n  Observer,\n  Unsubscribe\n} from '../interfaces/public-types';\nimport { MessagingService } from '../messaging-service';\n\nexport function onBackgroundMessage(\n  messaging: MessagingService,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe {\n  if (self.document !== undefined) {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  messaging.onBackgroundMessageHandler = nextOrObserver;\n\n  return () => {\n    messaging.onBackgroundMessageHandler = null;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Messaging } from '../interfaces/public-types';\nimport { MessagingService } from '../messaging-service';\n\nexport function _setDeliveryMetricsExportedToBigQueryEnabled(\n  messaging: Messaging,\n  enable: boolean\n): void {\n  (messaging as MessagingService).deliveryMetricsExportedToBigQueryEnabled =\n    enable;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './util/errors';\nimport { FirebaseApp, _getProvider, getApp } from '@firebase/app';\nimport {\n  GetTokenOptions,\n  MessagePayload,\n  Messaging\n} from './interfaces/public-types';\nimport {\n  NextFn,\n  Observer,\n  Unsubscribe,\n  getModularInstance\n} from '@firebase/util';\nimport { isSwSupported, isWindowSupported } from './api/isSupported';\n\nimport { MessagingService } from './messaging-service';\nimport { deleteToken as _deleteToken } from './api/deleteToken';\nimport { getToken as _getToken } from './api/getToken';\nimport { onBackgroundMessage as _onBackgroundMessage } from './api/onBackgroundMessage';\nimport { onMessage as _onMessage } from './api/onMessage';\nimport { _setDeliveryMetricsExportedToBigQueryEnabled } from './api/setDeliveryMetricsExportedToBigQueryEnabled';\n\n/**\n * Retrieves a Firebase Cloud Messaging instance.\n *\n * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.\n *\n * @public\n */\nexport function getMessagingInWindow(app: FirebaseApp = getApp()): Messaging {\n  // Conscious decision to make this async check non-blocking during the messaging instance\n  // initialization phase for performance consideration. An error would be thrown latter for\n  // developer's information. Developers can then choose to import and call `isSupported` for\n  // special handling.\n  isWindowSupported().then(\n    isSupported => {\n      // If `isWindowSupported()` resolved, but returned false.\n      if (!isSupported) {\n        throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n      }\n    },\n    _ => {\n      // If `isWindowSupported()` rejected.\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNSUPPORTED);\n    }\n  );\n  return _getProvider(getModularInstance(app), 'messaging').getImmediate();\n}\n\n/**\n * Retrieves a Firebase Cloud Messaging instance.\n *\n * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.\n *\n * @public\n */\nexport function getMessagingInSw(app: FirebaseApp = getApp()): Messaging {\n  // Conscious decision to make this async check non-blocking during the messaging instance\n  // initialization phase for performance consideration. An error would be thrown latter for\n  // developer's information. Developers can then choose to import and call `isSupported` for\n  // special handling.\n  isSwSupported().then(\n    isSupported => {\n      // If `isSwSupported()` resolved, but returned false.\n      if (!isSupported) {\n        throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n      }\n    },\n    _ => {\n      // If `isSwSupported()` rejected.\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNSUPPORTED);\n    }\n  );\n  return _getProvider(getModularInstance(app), 'messaging-sw').getImmediate();\n}\n\n/**\n * Subscribes the {@link Messaging} instance to push notifications. Returns an Firebase Cloud\n * Messaging registration token that can be used to send push messages to that {@link Messaging}\n * instance.\n *\n * If a notification permission isn't already granted, this method asks the user for permission. The\n * returned promise rejects if the user does not allow the app to show notifications.\n *\n * @param messaging - The {@link Messaging} instance.\n * @param options - Provides an optional vapid key and an optinoal service worker registration\n *\n * @returns The promise resolves with an FCM registration token.\n *\n * @public\n */\nexport async function getToken(\n  messaging: Messaging,\n  options?: GetTokenOptions\n): Promise<string> {\n  messaging = getModularInstance(messaging);\n  return _getToken(messaging as MessagingService, options);\n}\n\n/**\n * Deletes the registration token associated with this {@link Messaging} instance and unsubscribes\n * the {@link Messaging} instance from the push subscription.\n *\n * @param messaging - The {@link Messaging} instance.\n *\n * @returns The promise resolves when the token has been successfully deleted.\n *\n * @public\n */\nexport function deleteToken(messaging: Messaging): Promise<boolean> {\n  messaging = getModularInstance(messaging);\n  return _deleteToken(messaging as MessagingService);\n}\n\n/**\n * When a push message is received and the user is currently on a page for your origin, the\n * message is passed to the page and an `onMessage()` event is dispatched with the payload of\n * the push message.\n *\n *\n * @param messaging - The {@link Messaging} instance.\n * @param nextOrObserver - This function, or observer object with `next` defined,\n *     is called when a message is received and the user is currently viewing your page.\n * @returns To stop listening for messages execute this returned function.\n *\n * @public\n */\nexport function onMessage(\n  messaging: Messaging,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe {\n  messaging = getModularInstance(messaging);\n  return _onMessage(messaging as MessagingService, nextOrObserver);\n}\n\n/**\n * Called when a message is received while the app is in the background. An app is considered to be\n * in the background if no active window is displayed.\n *\n * @param messaging - The {@link Messaging} instance.\n * @param nextOrObserver - This function, or observer object with `next` defined, is called when a\n * message is received and the app is currently in the background.\n *\n * @returns To stop listening for messages execute this returned function\n *\n * @public\n */\nexport function onBackgroundMessage(\n  messaging: Messaging,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe {\n  messaging = getModularInstance(messaging);\n  return _onBackgroundMessage(messaging as MessagingService, nextOrObserver);\n}\n\n/**\n * Enables or disables Firebase Cloud Messaging message delivery metrics export to BigQuery. By\n * default, message delivery metrics are not exported to BigQuery. Use this method to enable or\n * disable the export at runtime.\n *\n * @param messaging - The `FirebaseMessaging` instance.\n * @param enable - Whether Firebase Cloud Messaging should export message delivery metrics to\n * BigQuery.\n *\n * @public\n */\nexport function experimentalSetDeliveryMetricsExportedToBigQueryEnabled(\n  messaging: Messaging,\n  enable: boolean\n): void {\n  messaging = getModularInstance(messaging);\n  return _setDeliveryMetricsExportedToBigQueryEnabled(messaging, enable);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport '@firebase/installations';\n\nimport { Messaging } from './interfaces/public-types';\nimport { registerMessagingInSw } from './helpers/register';\n\nexport * from './interfaces/public-types';\nexport {\n  onBackgroundMessage,\n  getMessagingInSw as getMessaging,\n  experimentalSetDeliveryMetricsExportedToBigQueryEnabled\n} from './api';\nexport { isSwSupported as isSupported } from './api/isSupported';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'messaging-sw': Messaging;\n  }\n}\n\nregisterMessagingInSw();\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}