{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sujayghosh/Documents/netflix/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/sujayghosh/Documents/netflix/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/sujayghosh/Documents/netflix/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/sujayghosh/Documents/netflix/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport firebase from '@firebase/app-compat';\nimport { Component } from '@firebase/component';\nimport { getToken as _getToken, deleteToken as _deleteToken, onMessage as _onMessage } from '@firebase/messaging';\nimport { isIndexedDBAvailable, areCookiesEnabled } from '@firebase/util';\nimport { onBackgroundMessage as _onBackgroundMessage } from '@firebase/messaging/sw';\nvar name = \"@firebase/messaging-compat\";\nvar version = \"0.2.1\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isSupported() {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSwSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowSupported();\n  }\n}\n/**\r\n * Checks to see if the required APIs exist.\r\n * Unlike the modular version, it does not check if IndexedDB.open() is allowed\r\n * in order to keep isSupported() synchronous and maintain v8 compatibility.\r\n */\nfunction isWindowSupported() {\n  return typeof window !== 'undefined' && isIndexedDBAvailable() && areCookiesEnabled() && 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window && 'fetch' in window && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}\n/**\r\n * Checks to see if the required APIs exist within SW Context.\r\n */\nfunction isSwSupported() {\n  return isIndexedDBAvailable() && 'PushManager' in self && 'Notification' in self && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}\nvar MessagingCompatImpl = /*#__PURE__*/function () {\n  function MessagingCompatImpl(app, _delegate) {\n    _classCallCheck(this, MessagingCompatImpl);\n    this.app = app;\n    this._delegate = _delegate;\n    this.app = app;\n    this._delegate = _delegate;\n  }\n  _createClass(MessagingCompatImpl, [{\n    key: \"getToken\",\n    value: function () {\n      var _getToken2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", _getToken(this._delegate, options));\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getToken(_x) {\n        return _getToken2.apply(this, arguments);\n      }\n      return getToken;\n    }()\n  }, {\n    key: \"deleteToken\",\n    value: function () {\n      var _deleteToken2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", _deleteToken(this._delegate));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function deleteToken() {\n        return _deleteToken2.apply(this, arguments);\n      }\n      return deleteToken;\n    }()\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(nextOrObserver) {\n      return _onMessage(this._delegate, nextOrObserver);\n    }\n  }, {\n    key: \"onBackgroundMessage\",\n    value: function onBackgroundMessage(nextOrObserver) {\n      return _onBackgroundMessage(this._delegate, nextOrObserver);\n    }\n  }]);\n  return MessagingCompatImpl;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar messagingCompatFactory = function messagingCompatFactory(container) {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // in sw\n    return new MessagingCompatImpl(container.getProvider('app-compat').getImmediate(), container.getProvider('messaging-sw').getImmediate());\n  } else {\n    // in window\n    return new MessagingCompatImpl(container.getProvider('app-compat').getImmediate(), container.getProvider('messaging').getImmediate());\n  }\n};\nvar NAMESPACE_EXPORTS = {\n  isSupported: isSupported\n};\nfunction registerMessagingCompat() {\n  firebase.INTERNAL.registerComponent(new Component('messaging-compat', messagingCompatFactory, \"PUBLIC\" /* ComponentType.PUBLIC */).setServiceProps(NAMESPACE_EXPORTS));\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nregisterMessagingCompat();\nfirebase.registerVersion(name, version);","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;AAeG;SAwCaA,WAAW;EACzB,IAAIC,IAAI,IAAI,0BAA0B,IAAIA,IAAI,EAAE;;IAE9C,OAAOC,aAAa,EAAE;EACvB,OAAM;;IAEL,OAAOC,iBAAiB,EAAE;EAC3B;AACH;AAEA;;;;AAIG;AACH,SAASA,iBAAiB;EACxB,OACE,OAAOC,MAAM,KAAK,WAAW,IAC7BC,oBAAoB,EAAE,IACtBC,iBAAiB,EAAE,IACnB,eAAe,IAAIC,SAAS,IAC5B,aAAa,IAAIH,MAAM,IACvB,cAAc,IAAIA,MAAM,IACxB,OAAO,IAAIA,MAAM,IACjBI,yBAAyB,CAACC,SAAS,CAACC,cAAc,CAAC,kBAAkB,CAAC,IACtEC,gBAAgB,CAACF,SAAS,CAACC,cAAc,CAAC,QAAQ,CAAC;AAEvD;AAEA;;AAEG;AACH,SAASR,aAAa;EACpB,OACEG,oBAAoB,EAAE,IACtB,aAAa,IAAIJ,IAAI,IACrB,cAAc,IAAIA,IAAI,IACtBO,yBAAyB,CAACC,SAAS,CAACC,cAAc,CAAC,kBAAkB,CAAC,IACtEC,gBAAgB,CAACF,SAAS,CAACC,cAAc,CAAC,QAAQ,CAAC;AAEvD;AAAC,IAEYE,mBAAmB;EAC9B,6BAAqBC,GAAc,EAAWC,SAAoB;IAAA;IAA7C,IAAG,OAAHD,GAAG;IAAsB,IAAS,aAATC,SAAS;IACrD,IAAI,CAACD,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,SAAS,GAAGA,SAAS;;EAC3B;IAAA;IAAA;MAAA,4EAED,iBAAeC,OAGd;QAAA;UAAA;YAAA;cAAA,iCACQC,SAAQ,CAAC,IAAI,CAACF,SAAS,EAAEC,OAAO,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CACzC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,+EAED;QAAA;UAAA;YAAA;cAAA,kCACSE,YAAW,CAAC,IAAI,CAACH,SAAS,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CACnC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA,OAED,mBACEI,cAAiE;MAEjE,OAAOC,UAAS,CAAC,IAAI,CAACL,SAAS,EAAEI,cAAc,CAAC;;EACjD;IAAA;IAAA,OAED,6BACEA,cAAiE;MAEjE,OAAOE,oBAAmB,CAAC,IAAI,CAACN,SAAS,EAAEI,cAAc,CAAC;;EAC3D;EAAA;AAAA;AC5HH;;;;;;;;;;;;;;;AAeG;AAiBH,IAAMG,sBAAsB,GAAwC,SAA9DA,sBAAsB,CAC1BC,SAA6B,EAC3B;EACF,IAAIrB,IAAI,IAAI,0BAA0B,IAAIA,IAAI,EAAE;;IAE9C,OAAO,IAAIW,mBAAmB,CAC5BU,SAAS,CAACC,WAAW,CAAC,YAAY,CAAC,CAACC,YAAY,EAAE,EAClDF,SAAS,CAACC,WAAW,CAAC,cAAc,CAAC,CAACC,YAAY,EAAE,CACrD;EACF,OAAM;;IAEL,OAAO,IAAIZ,mBAAmB,CAC5BU,SAAS,CAACC,WAAW,CAAC,YAAY,CAAC,CAACC,YAAY,EAAE,EAClDF,SAAS,CAACC,WAAW,CAAC,WAAW,CAAC,CAACC,YAAY,EAAE,CAClD;EACF;AACH,CAAC;AAED,IAAMC,iBAAiB,GAAG;EACxBzB,WAAW,EAAXA;CACD;SAEe0B,uBAAuB;EACpCC,QAA+B,CAACC,QAAQ,CAACC,iBAAiB,CACzD,IAAIC,SAAS,CACX,kBAAkB,EAClBT,sBAAsB,sCAEvB,CAACU,eAAe,CAACN,iBAAiB,CAAC,CACrC;AACH;;AC9DA;;;;;;;;;;;;;;;AAeG;AAQHC,uBAAuB,EAAE;AACzBC,QAAQ,CAACK,eAAe,CAACC,IAAI,EAAEC,OAAO,CAAC","names":["isSupported","self","isSwSupported","isWindowSupported","window","isIndexedDBAvailable","areCookiesEnabled","navigator","ServiceWorkerRegistration","prototype","hasOwnProperty","PushSubscription","MessagingCompatImpl","app","_delegate","options","getToken","deleteToken","nextOrObserver","onMessage","onBackgroundMessage","messagingCompatFactory","container","getProvider","getImmediate","NAMESPACE_EXPORTS","registerMessagingCompat","firebase","INTERNAL","registerComponent","Component","setServiceProps","registerVersion","name","version"],"sources":["/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging-compat/src/messaging-compat.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging-compat/src/registerMessagingCompat.ts","/Users/sujayghosh/Documents/netflix/node_modules/@firebase/messaging-compat/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp as AppCompat,\n  _FirebaseService\n} from '@firebase/app-compat';\nimport {\n  Messaging,\n  MessagePayload,\n  deleteToken,\n  getToken,\n  onMessage\n} from '@firebase/messaging';\nimport {\n  areCookiesEnabled,\n  isIndexedDBAvailable,\n  NextFn,\n  Observer,\n  Unsubscribe\n} from '@firebase/util';\n\nimport { onBackgroundMessage } from '@firebase/messaging/sw';\n\nexport interface MessagingCompat {\n  getToken(options?: {\n    vapidKey?: string;\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n  }): Promise<string>;\n\n  deleteToken(): Promise<boolean>;\n\n  onMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe;\n\n  onBackgroundMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe;\n}\n\nexport function isSupported(): boolean {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSwSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowSupported();\n  }\n}\n\n/**\n * Checks to see if the required APIs exist.\n * Unlike the modular version, it does not check if IndexedDB.open() is allowed\n * in order to keep isSupported() synchronous and maintain v8 compatibility.\n */\nfunction isWindowSupported(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    isIndexedDBAvailable() &&\n    areCookiesEnabled() &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks to see if the required APIs exist within SW Context.\n */\nfunction isSwSupported(): boolean {\n  return (\n    isIndexedDBAvailable() &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\nexport class MessagingCompatImpl implements MessagingCompat, _FirebaseService {\n  constructor(readonly app: AppCompat, readonly _delegate: Messaging) {\n    this.app = app;\n    this._delegate = _delegate;\n  }\n\n  async getToken(options?: {\n    vapidKey?: string;\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n  }): Promise<string> {\n    return getToken(this._delegate, options);\n  }\n\n  async deleteToken(): Promise<boolean> {\n    return deleteToken(this._delegate);\n  }\n\n  onMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe {\n    return onMessage(this._delegate, nextOrObserver);\n  }\n\n  onBackgroundMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe {\n    return onBackgroundMessage(this._delegate, nextOrObserver);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactory\n} from '@firebase/component';\nimport { MessagingCompatImpl, isSupported } from './messaging-compat';\nimport firebase, { _FirebaseNamespace } from '@firebase/app-compat';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'messaging-compat': MessagingCompatImpl;\n  }\n}\n\nconst messagingCompatFactory: InstanceFactory<'messaging-compat'> = (\n  container: ComponentContainer\n) => {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // in sw\n    return new MessagingCompatImpl(\n      container.getProvider('app-compat').getImmediate(),\n      container.getProvider('messaging-sw').getImmediate()\n    );\n  } else {\n    // in window\n    return new MessagingCompatImpl(\n      container.getProvider('app-compat').getImmediate(),\n      container.getProvider('messaging').getImmediate()\n    );\n  }\n};\n\nconst NAMESPACE_EXPORTS = {\n  isSupported\n};\n\nexport function registerMessagingCompat(): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'messaging-compat',\n      messagingCompatFactory,\n      ComponentType.PUBLIC\n    ).setServiceProps(NAMESPACE_EXPORTS)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name, version } from '../package.json';\n\nimport firebase from '@firebase/app-compat';\nimport { registerMessagingCompat } from './registerMessagingCompat';\nimport { MessagingCompat } from './messaging-compat';\n\nregisterMessagingCompat();\nfirebase.registerVersion(name, version);\n\n/**\n * Define extension behavior of `registerMessaging`\n */\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    messaging: {\n      (app?: FirebaseApp): MessagingCompat;\n      isSupported(): boolean;\n    };\n  }\n  interface FirebaseApp {\n    messaging(): MessagingCompat;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}